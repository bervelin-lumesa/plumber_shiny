shiny::runApp()
?showModal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pr <- plumber::plumb("plumber.R")
pr$run(host = "127.0.1.1", port = 8080)
runApp()
rm(list = ls())
runApp()
runApp()
library(httr)
library(jsonlite)
# Specify the URL
url <- "https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/?format=json"
# Make a GET request to the API
response <- GET(url)
response
# Check the status of the response (200 means success)
if (status_code(response) == 200) {
# Convert the response content to text
content_as_text <- content(response, as = "text", encoding = "UTF-8")
# Parse the JSON text and convert it to a list or dataframe
data <- fromJSON(content_as_text, flatten = TRUE)
# Inspect the structure of the data
str(data)
# Convert relevant data to a dataframe (depending on the structure)
# If the data is nested, you'll have to navigate the list to extract the right part
df <- as.data.frame(data)
# View the dataframe
print(df)
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
library(httr)
library(jsonlite)
# Specify the URL
url <- "https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/?format=json"
# Make a GET request to the API
response <- GET(url)
# Check the status of the response (200 means success)
if (status_code(response) == 200) {
# Convert the response content to text
content_as_text <- content(response, as = "text", encoding = "UTF-8")
# Parse the JSON text and convert it to a list
data <- fromJSON(content_as_text, flatten = TRUE)
# Inspect the structure of the data to see what part you need to extract
str(data)
# Assuming 'data' is a nested list, find the part that contains the tabular data
# For example, if the data you need is in data$results (which is common in APIs):
# Extract the relevant part (replace 'results' with the correct key from str(data))
relevant_data <- data$results
# Convert it to a dataframe
df <- as.data.frame(relevant_data)
# View the dataframe
print(df)
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
View(data)
read.csv("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv")
read.csv("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv", sep = ";")
df <- readr::read_csv("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv", sep = ";")
df <- readr::read_csv("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv"
)
View(df)
df <- readr::read_csv2("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv"
)
View(df)
df <- readr::read_csv2("https://eu.kobotoolbox.org/api/v2/assets/a7RA94LgFqmRmWZUP7J6S2/export-settings/esDgeeoKgUNDdcajGb7HP3i/data.csv")
runApp()
source("D:/Working with softwares/r/plumber/plumber_learning/run_plumber.R", echo=TRUE)
plumber::plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
